/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package vistaEscritorio;

import controlador.controladorMonitoreo;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;
import modelo.Fachada;
import modelo.Llamada;
import modelo.Sector;
import controlador.IvistaMonitoreo;

/**
 *
 * @author Guille
 */
public class VistaMonitoreo extends javax.swing.JFrame implements IvistaMonitoreo {

    /**
     * Creates new form VentanaMonitoreo
     */
    private ArrayList<Sector> sectores = Fachada.getInstancia().getSectores();
    private controladorMonitoreo controlador;

    public VistaMonitoreo() {
        initComponents();
        setLocationRelativeTo(null);
        setTitle("Monitoreo");
        controlador = new controladorMonitoreo(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        lSectores = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaLlamadas = new javax.swing.JTable();
        bSalir = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        lSectores.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                lSectoresPropertyChange(evt);
            }
        });
        lSectores.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lSectoresValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(lSectores);

        tablaLlamadas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(tablaLlamadas);

        bSalir.setText("Salir");

        jLabel1.setText("Sectores");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(bSalir))
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 677, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(bSalir)
                .addContainerGap(45, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void lSectoresPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_lSectoresPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_lSectoresPropertyChange

    private void lSectoresValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lSectoresValueChanged
        controlador.mostrarEnTabla();
    }//GEN-LAST:event_lSectoresValueChanged

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        controlador.salir();
    }//GEN-LAST:event_formWindowClosing


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bSalir;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList lSectores;
    private javax.swing.JTable tablaLlamadas;
    // End of variables declaration//GEN-END:variables

    @Override
    public void mostrarEnLista() {
        if(sectores.size() <= 3){//Valida que no se cree de nuevo el sector, si se abren mas de un monitor
            sectores.add(new Sector("< Todos los sectores >", 4,4));
        }
        lSectores.setListData(sectores.toArray());
    }
    
    @Override
    public void seleccionarSector() {
        int pos = lSectores.getSelectedIndex();
        Sector seleccionado = null;
        if(pos!=-1){
          seleccionado = sectores.get(pos);
        }else{
           seleccionado = sectores.get(3);//Valor por defecto si no hay nada seleccionado
        }
        controlador.seleccion(seleccionado);
    }
    
    @Override
    public void mostrarTodosLosSectores(ArrayList<Llamada> todasLasLlamadas) {
        DefaultTableModel datos = new DefaultTableModel();
            datos.addColumn("Sector");
            datos.addColumn("# llamada");
            datos.addColumn("Estado");
            datos.addColumn("Inicio");
            datos.addColumn("Atendida");
            datos.addColumn("Fin");
            datos.addColumn("# puesto");
            datos.addColumn("Trabajador");
            datos.addColumn("Duracion");
            datos.addColumn("Costo");
            datos.addColumn("Cliente");
            datos.addColumn("Saldo");
            datos.setRowCount(sectores.size());

            int fila = 0;
            SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss dd/MM/yyyy");
            
            for (Llamada unaLlamada : todasLasLlamadas) {
                datos.setValueAt(unaLlamada.getSector().getNombre(), fila, 0);
                datos.setValueAt(unaLlamada.getId(), fila, 1);
                datos.setValueAt(unaLlamada.cambiarEstado(), fila, 2);
                datos.setValueAt(sdf.format(unaLlamada.getFechaHoraInicio()), fila, 3);
                datos.setValueAt(sdf.format(unaLlamada.getFechaHoraAtendida()), fila, 4);
                if (unaLlamada.getEstado()) {
                    datos.setValueAt("-", fila, 5);
                } else {
                    datos.setValueAt(sdf.format(unaLlamada.getFechaHoraFin()), fila, 5);
                }
                datos.setValueAt(unaLlamada.getTrabajador().hayPuesto(), fila, 6);
                datos.setValueAt(unaLlamada.getTrabajador().getNombreCompleto(), fila, 7);
                datos.setValueAt((float) unaLlamada.tiempoLlamada(), fila, 8);
                datos.setValueAt(unaLlamada.getCosto(), fila, 9);
                datos.setValueAt(unaLlamada.getCliente().getNombreCompleto(), fila, 10);
                datos.setValueAt(unaLlamada.getCliente().getSaldo(), fila, 11);
                fila++;
            }
            tablaLlamadas.setModel(datos);
    }

    @Override
    public void mostrarSectoresSeleccionados(ArrayList<Llamada> llamadasAtendidasPorSector) {
        DefaultTableModel datos = new DefaultTableModel();
            datos.addColumn("# llamada");
            datos.addColumn("Estado");
            datos.addColumn("Inicio");
            datos.addColumn("Atendida");
            datos.addColumn("Fin");
            datos.addColumn("# puesto");
            datos.addColumn("Trabajador");
            datos.addColumn("Duracion");
            datos.addColumn("Costo");
            datos.addColumn("Cliente");
            datos.addColumn("Saldo");
            datos.setRowCount(sectores.size());

            int fila = 0;
            SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss dd/MM/yyyy");
            
            for (Llamada unaLlamada : llamadasAtendidasPorSector) {
                datos.setValueAt(unaLlamada.getId(), fila, 0);
                datos.setValueAt(unaLlamada.cambiarEstado(), fila, 1);
                datos.setValueAt(sdf.format(unaLlamada.getFechaHoraInicio()), fila, 2);
                datos.setValueAt(sdf.format(unaLlamada.getFechaHoraAtendida()), fila, 3);
                if (unaLlamada.getEstado()) {
                    datos.setValueAt("-", fila, 4);
                } else {
                    datos.setValueAt(sdf.format(unaLlamada.getFechaHoraFin()), fila, 4);
                }
                datos.setValueAt(unaLlamada.getTrabajador().hayPuesto(), fila, 5);
                datos.setValueAt(unaLlamada.getTrabajador().getNombreCompleto(), fila, 6);
                datos.setValueAt((float) unaLlamada.tiempoLlamada(), fila, 7);
                datos.setValueAt(unaLlamada.getCosto(), fila, 8);
                datos.setValueAt(unaLlamada.getCliente().getNombreCompleto(), fila, 9);
                datos.setValueAt(unaLlamada.getCliente().getSaldo(), fila, 10);
                fila++;
            }
            tablaLlamadas.setModel(datos);
    }
}
